#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;
use FusionInventory::Agent::Config;
use FusionInventory::Agent::Logger;
use FusionInventory::Agent::Task::WakeOnLan;
use FusionInventory::Agent::Tools::Network;

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {
    debug => 0,
};

GetOptions(
    $options,
    'config=s',
    'conf-file=s',
    'ethernet!',
    'udp!',
    'debug+',
    'help',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "no mac address given, aborting\n", -verbose => 0
) unless @ARGV;

my $config = FusionInventory::Agent::Config->create(
    backend   => $options->{config},
    directory => $setup{confdir},
    file      => $options->{'conf-file'},
    options   => $options,
);

my $logger = FusionInventory::Agent::Logger->new(
    config => $config
);

my $agent = FusionInventory::Agent->new(
    config => $config,
    logger => $logger,
    setup  => \%setup
);
$agent->init();
$agent->initHandlers();

my $task = FusionInventory::Agent::Task::WakeOnLan->new(
    logger => $logger,
);

$task->configure(
    addresses => [ @ARGV ],
    ethernet  => $options->{ethernet},
    udp       => $options->{udp}
);

$agent->executeTask(task => $task);

__END__

=head1 NAME

fusioninventory-wakeonlan - Standalone wake-on-lan

=head1 SYNOPSIS

B<fusioninventory-wakeonlan>
S<[B<--config> I<string>]>
S<[B<--conf-file> I<path>]>
S<[B<--ethernet>]> S<[B<--udp>]>
S<[B<--debug>]>
I<mac> S<[I<mac> ...]>

=head1 DESCRIPTION

F<fusioninventory-wakeonlan> allows to run a wakeonlan task without a GLPI
server.

=head1 OPTIONS

=over

=item B<--config> I<string>

Configuration backend to use (default: file).

The available backends are:

=over 4

=item

file: read configuration from a file

=item

registry: read configuration from the registry

=item

none: don't read any configuration

=back

=item B<--conf-file> I<path>

Use I<path> as configuration file (implies file configuration backend).

=item B<--ethernet>

use ethernet method if available (true).

=item B<--udp>

use UDP method if available (true).

=item B<--debug>

debug output

=back

=head1 EXAMPLES

Send wake-on-lan packets to a single mac address:

    $> fusioninventory-wakeonlan f0:1f:af:0f:a4:0c

Send wake-on-lan packets to a single mac address, disabling ethernet method:

    $> fusioninventory-wakeonlan f0:1f:af:0f:a4:0c --noethernet

Send wake-on-lan packets to two mac addresses:

    $> fusioninventory-wakeonlan f0:1f:af:0f:a4:0c f0:1f:af:0f:a4:0d
