#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;
use FusionInventory::Agent::Config;
use FusionInventory::Agent::Logger;
use FusionInventory::Agent::Target;
use FusionInventory::Agent::Task::NetInventory;
use FusionInventory::Agent::Tools;

my %types = (
    1 => 'COMPUTER',
    2 => 'NETWORKING',
    3 => 'PRINTER',
    4 => 'STORAGE',
    5 => 'POWER',
    6 => 'PHONE',
    7 => 'VIDEO',
);

my $options = {
    debug     => 0,
    threads   => 1,
    version   => '2c',
    community => 'public'
};

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

GetOptions(
    $options,
    'config=s',
    'conf-file=s',
    'directory=s',
    'server=s',
    'type=s',
    'host=s',
    'file=s',
    'community=s',
    'version=s',
    'username=s',
    'authpassword=s',
    'authprotocol=s',
    'privpassword=s',
    'privprotocol=s',
    'entity=s',
    'threads=i',
    'timeout=i',
    'debug+',
    'help',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "--host option is deprecated, use regular argument instead\n",
    -verbose => 0
) if $options->{host};

pod2usage(
    -message => "--file option is deprecated, use regular argument instead\n",
    -verbose => 0
) if $options->{file};

pod2usage(
    -message => "no host given, aborting\n", -verbose => 0
) unless @ARGV;

pod2usage(
    -message => "invalid type '$options->{type}', aborting\n",
    -verbose => 0
) if $options->{type} && none { $options->{type} eq $_ } values %types;

my $credentials = { id => 1 };

if ($options->{credentials}) {
    foreach my $parameter (split(',', $options->{credentials})) {
        my ($key, $value) = split(':', $parameter);
        $credentials->{$key} = $value;
    }
} else {
    $credentials->{version}   = '2c';
    $credentials->{community} = 'public';
}

my $host_id = 1;
my @jobs;
foreach my $arg (@ARGV) {
    my $job;
    foreach my $parameter (split(',', $arg)) {
        my ($key, $value) = split(':', $parameter);
        if (!$value) {
            $job->{host} = $key;
        } else {
            $job->{$key} = $value;
        }
    }
    $job->{id}           ||= $host_id++;
    $job->{entity}       ||= $options->{entity};
    $job->{type}         ||= $options->{type};
    $job->{version}      ||= $options->{version};
    $job->{community}    ||= $options->{community};
    $job->{authpassword} ||= $options->{authpassword};
    $job->{authprotocol} ||= $options->{authprotocol};
    $job->{privpassword} ||= $options->{privpassword};
    $job->{privprotocol} ||= $options->{privprotocol};
    push @jobs, $job;
}


my $config = FusionInventory::Agent::Config->new(
    confdir => $setup{confdir},
    options => $options,
);

my $logger = FusionInventory::Agent::Logger->new(
    config => $config
);

my $agent = FusionInventory::Agent->new(
    config => $config,
    logger => $logger,
    setup  => \%setup
);
$agent->init();
$agent->initHandlers();

my $task = FusionInventory::Agent::Task::NetInventory->new(
    logger => $logger,
    name   => 'NetInventory',
);

$task->configure(
    pid     => 1,
    threads => $options->{threads},
    timeout => $options->{timeout},
    jobs    => \@jobs,
);

my $target = FusionInventory::Agent::Target->create(
    url    => $options->{server},
    path   => $options->{directory},
    logger => $logger,
    config => $config,
);

$agent->executeTask(task => $task, target => $target);

__END__

=head1 NAME

fusioninventory-netinventory - Standalone network inventory

=head1 SYNOPSIS

B<fusioninventory-netinventory>
S<[B<--config> I<string>]>
S<[B<--conf-file> I<path>]>
S<[B<--directory> I<path>]>
S<[B<--server> I<url>]>
S<[B<--version> I<string>]>
S<[B<--community> I<string>]>
S<[B<--username> I<string>]>
S<[B<--authpassword> I<string>]> S<[B<--authprotocol> I<string>]>
S<[B<--privpassword> I<string>]> S<[B<--privprotocol> I<string>]>
S<[B<--timeout> I<integer>]>
S<[B<--threads> I<integer>]> S<[B<--entity> I<string>]>
S<[B<--debug>]>
I<host> S<[I<host> ...]>

=head1 DESCRIPTION

F<fusioninventory-netinventory> allows to run a network inventory task without
a GLPI server.

=head1 OPTIONS

=over

=item B<--config> I<string>

Configuration backend to use.

The available backends are:

=over 4

=item

file: read configuration from a file (default anywhere else as Windows).

=item

registry: read configuration from the registry (default on Windows).

=item

none: don't read any configuration.

=back

=item B<--conf-file> I<path>

Use I<path> as configuration file (implies file configuration backend).

=item B<--directory> I<path>

directory target path

=item B<--server> I<url>

server target url

=item B<--version> I<string>

SNMP version (default: 2c)

=item B<--community> I<string>

SNMP v1/v2c community (default: public)

=item B<--username> I<string>

SNMP v3 username

=item B<--authprotocol> I<string>

SNMP v3 authentication protocol

=item B<--authpassword> I<string>

SNMP v3 authentication password

=item B<--privprotocol> I<string>

SNMP v3 privacy protocol

=item B<--privpassword> I<string>

SNMP v3 privacy password

=item B<--timeout> I<integer>

SNMP timeout (default: 15s)

=item B<--threads> I<integer>

threads number (default: 1)

=item B<--entity> I<string>

GLPI entity

=item B<--debug>

debug output

=back

=head1 EXAMPLES

Execute an inventory of a single remote host, sending the results to stdout:

    $> fusioninventory-netinventory 192.168.1.24

Execute an inventory of a single remote host, sending the results to a directory:

    $> fusioninventory-netinventory --directory /tmp 192.168.1.24

Execute an inventory of a single remote host, sending the results to a server:

    $> fusioninventory-netinventory \
        --server http://glpi.domain.com/plugins/fusioninventory/ \
        192.168.1.24

Execute an inventory of two remote hosts, sending the results to stdout:

    $> fusioninventory-netinventory 192.168.1.24 192.168.1.25

Execute an inventory of two remote hosts, using same SNMP credentials,
sending the results to stdout:

    $> fusioninventory-netinventory --version 1 --community foo \
        192.168.1.24 192.168.1.25

Execute an inventory of two remote hosts, using different SNMP credentials,
sending the results to stdout:

    $> fusioninventory-netinventory \
        host:192.168.1.24,version:1,community:foo \
        host:192.168.1.25,version:2c,community:bar

Execute an inventory of a single host, identified as a printer, sending the
results to stdout:

    $> fusioninventory-netinventory host:192.168.1.24,type:printer

Execute an inventory of a single host, from a snmpwalk capture, sending the
results to stdout:

    $> fusioninventory-netinventory file:192.168.1.24.walk
