#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;
use XML::TreePP;

use FusionInventory::Agent::Task::NetInventory;
use FusionInventory::Agent::Logger;

my $options = {
    community => 'public'
};

GetOptions(
    $options,
    'model=s',
    'host=s',
    'file=s',
    'models-dir=s',
    'community=s',
    'entity=s',
    'verbose',
    'debug+',
    'help',
    'version',
) or pod2usage(-verbose => 0);

if ($options->{version}) {
  print "NetInventory task $FusionInventory::Agent::Task::NetInventory::VERSION\n";
  exit 0;
}
pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "no model given, aborting\n", -verbose => 0
) if (!$options->{model} && !$options->{'models-dir'});

pod2usage(
    -message => "invalid dir '".$options->{'models-dir'}."', aborting\n", -verbose => 0
) if $options->{'models-dir'} && !-d $options->{'models-dir'};

pod2usage(
    -message => "no host nor file given, aborting\n", -verbose => 0
) unless $options->{host} or $options->{file};


my $inventory = FusionInventory::Agent::Task::NetInventory->new(
    target => FusionInventory::Agent::Task::NetInventory::Target->new(),
    logger =>  FusionInventory::Agent::Logger->new(
        debug => $options->{debug}
    )
);

my $model;
my $type;
if ($options->{model}) {
    pod2usage(
        -message => "invalid file '$options->{model}', aborting\n", -verbose => 0
    ) unless -f $options->{model};
    $model = $inventory->loadModel($options->{model});

    $type =
        $model->{TYPE} == 1 ? 'COMPUTER'   :
        $model->{TYPE} == 2 ? 'NETWORKING' :
        $model->{TYPE} == 3 ? 'PRINTER'    :
                          undef        ;

}

$inventory->{options} = {
    NAME => 'SNMPQUERY',
    PARAM => [
        {
            PID           => 1,
            THREADS_QUERY => 1
        }
    ],
    DEVICE => [
        {
            TYPE         => $type,
            IP           => $options->{host},
            FILE         => $options->{file},
            AUTHSNMP_ID  => 'local',
            MODELSNMP_ID => 'local'
        }
    ],
    MODEL => $model?[ $model ]:undef,
    AUTHENTICATION => [
        {
            ID        => 'local', # not to confuse with the ID from the server
            COMMUNITY => $options->{community},
        }
    ]
};

my $redis = Redis->new(server => '127.0.0.1:6379');
$redis->select(1);
exit if $redis->get($options->{file}) == 1;

$inventory->{models_dir} = $options->{'models-dir'};
if (defined($options->{entity})) {
    $inventory->{options}->{DEVICE}->[0]->{ENTITY} = $options->{entity};
}
$inventory->{client} =
    FusionInventory::Agent::Task::NetInventory::Client->new(
        verbose => $options->{verbose}
    );
# TODO: need to be dropped the day we will depend on agent >= 2.3.0
$inventory->{deviceid} = 'foo';

$inventory->run();

package FusionInventory::Agent::Task::NetInventory::Client;

sub new {
    my ($class, %params) = @_;

    return bless {
        verbose => $params{verbose}
    }, $class;
}

sub send {
    my ($self, %params) = @_;

    # don't display control message by default
    return unless $self->{verbose}
        or $params{message}->{h}->{CONTENT}->{DEVICE};

    print $params{message}->getContent();
}

package FusionInventory::Agent::Task::NetInventory::Target;

sub new {
    my ($class) = @_;

    return bless {}, $class;
}

sub getUrl {
    my ($self, %params) = @_;

    ## no critic (ExplicitReturnUndef)
    return undef;
}

__END__

=head1 NAME

fusioninventory-netinventory - Standalone network inventory

=head1 SYNOPSIS

fusioninventory-netinventory [options] [--host <host>--file <file>]
  [--model <model>]

  Options:
    --host host    host to inventorize
    --file         snmpwalk output file
    --model model  XML model file
    --community    community string (default: public)
    --entity       GLPI entity
    --verbose      verbose output (control messages)
    --debug        debug output (execution traces)
    -h --help      print this message and exit
    --version      print the task version and exit

=head1 DESCRIPTION

F<fusioninventory-netinventory> allows to run a network inventory task without
a GLPI server.
