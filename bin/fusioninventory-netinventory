#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;
use XML::TreePP;

use FusionInventory::Agent::Task::NetInventory;
use FusionInventory::Agent::Tools;
use FusionInventory::Agent::Logger;
use FusionInventory::Agent::Target;

my %types = (
    1 => 'COMPUTER',
    2 => 'NETWORKING',
    3 => 'PRINTER',
    4 => 'STORAGE',
    5 => 'POWER',
    6 => 'PHONE',
    7 => 'VIDEO',
);

my $options = {
    debug => 0
};

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

GetOptions(
    $options,
    'server=s',
    'directory=s',
    'model=s',
    'type=s',
    'host=s',
    'file=s',
    'community=s',
    'credentials=s',
    'entity=s',
    'timeout=i',
    'debug+',
    'help',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "no host nor file given, aborting\n", -verbose => 0
) unless $options->{host} or $options->{file};

warn "deprecated option model, ignoring\n" if $options->{model};

my $device = {
    id           => 0,
    ip           => $options->{host},
    file         => $options->{file},
    authsnmp_id  => 1,
    modelsnmp_id => 1
};

if ($options->{entity}) {
    $device->{entity} = $options->{entity};
}

my $credentials = { id => 1 };

if ($options->{type}) {
    pod2usage(
        -message => "invalid type '$options->{type}', aborting\n",
        -verbose => 0
    ) unless any { $options->{type} eq $_ } values %types;
    $device->{type} = $options->{type};
}

if ($options->{community}) {
    $credentials->{community} = $options->{community};
} elsif (defined $options->{credentials}) {
    foreach my $parameter (split(',', $options->{credentials})) {
        my ($key, $value) = split(':', $parameter);
        $credentials->{$key} = $value;
    }
} else {
    $credentials->{community} = 'public';
}

my $verbosity =
    $options->{debug} == 0 ? LOG_INFO   :
    $options->{debug} == 1 ? LOG_DEBUG  :
    $options->{debug} == 2 ? LOG_DEBUG2 :
                             LOG_DEBUG2 ;

my $logger = FusionInventory::Agent::Logger->new(verbosity => $verbosity);

my $task = FusionInventory::Agent::Task::NetInventory->new(
    logger   => $logger,
    datadir  => $setup{datadir},
    confdir  => $setup{confdir},
    deviceid => 'foo',
);

$task->configure(
    pid         => 1,
    timeout     => $options->{timeout},
    devices     => [ $device ],
    credentials => [ $credentials ]
);

my $target = FusionInventory::Agent::Target->create(
    url    => $options->{server},
    path   => $options->{directory},
    logger => $logger,
);

$task->run(target => $target);

__END__

=head1 NAME

fusioninventory-netinventory - Standalone network inventory

=head1 SYNOPSIS

fusioninventory-netinventory [options] [--host <host>--file <file>]

  Options:
    --directory    directory target
    --server       server target
    --host host    host to inventorize
    --file         snmpwalk output file
    --community    community string (default: public)
    --credentials  SNMP credentials
    --timeout val  SNMP timeout (default: 15s)
    --entity       GLPI entity
    --debug        debug output (execution traces)
    -h --help      print this message and exit

=head1 DESCRIPTION

F<fusioninventory-netinventory> allows to run a network inventory task without
a GLPI server.
