#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent::Task::NetInventory;
use FusionInventory::Agent::Config;
use FusionInventory::Agent::Tools;
use FusionInventory::Agent::Logger;
use FusionInventory::Agent::Target;

my %types = (
    1 => 'COMPUTER',
    2 => 'NETWORKING',
    3 => 'PRINTER',
    4 => 'STORAGE',
    5 => 'POWER',
    6 => 'PHONE',
    7 => 'VIDEO',
);

my $options = {
    debug   => 0,
    threads => 1
};

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

GetOptions(
    $options,
    'server=s',
    'directory=s',
    'type=s',
    'host=s',
    'file=s',
    'community=s',
    'credentials=s',
    'entity=s',
    'threads=i',
    'timeout=i',
    'debug+',
    'help',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "--host option is deprecated, use regular argument instead\n",
    -verbose => 0
) if $options->{host};

pod2usage(
    -message => "--file option is deprecated, use regular argument instead\n",
    -verbose => 0
) if $options->{file};

pod2usage(
    -message => "--community option is deprecated, use --credentials instead\n",
    -verbose => 0
) if $options->{community};

pod2usage(
    -message => "no host given, aborting\n", -verbose => 0
) unless @ARGV;

pod2usage(
    -message => "invalid type '$options->{type}', aborting\n",
    -verbose => 0
) if $options->{type} && none { $options->{type} eq $_ } values %types;

my $host_id = 1;
my @hosts;
foreach my $arg (@ARGV) {
    my $host = {
        authsnmp_id => 1,
    };
    foreach my $parameter (split(',', $arg)) {
        my ($key, $value) = split(':', $parameter);
        if (!$value) {
            $host->{ip} = $key;
        } else {
            $host->{$key} = $value;
        }
    }
    $host->{id}     = $host_id++ unless $host->{id};
    $host->{entity} = $options->{entity} if $options->{entity};
    $host->{type}   = $options->{type} if $options->{type};
    push @hosts, $host;
}

my $credentials = { id => 1 };

if ($options->{credentials}) {
    foreach my $parameter (split(',', $options->{credentials})) {
        my ($key, $value) = split(':', $parameter);
        $credentials->{$key} = $value;
    }
} else {
    $credentials->{version}   = '2c';
    $credentials->{community} = 'public';
}

my $config = FusionInventory::Agent::Config->new(
    confdir => $setup{confdir},
    options => $options,
);

my $verbosity =
    $options->{debug} == 0 ? LOG_INFO   :
    $options->{debug} == 1 ? LOG_DEBUG  :
    $options->{debug} == 2 ? LOG_DEBUG2 :
                             LOG_DEBUG2 ;

my $logger = FusionInventory::Agent::Logger->new(
    verbosity => $verbosity,
    backends  => $config->{'logger'},
    config    => {
        logfile         => $config->{'logfile'},
        logfile_maxsize => $config->{'logfile-maxsize'},
        logfacility     => $config->{'logfacility'},
        color           => $config->{'color'},
    }
);

my $task = FusionInventory::Agent::Task::NetInventory->new(
    logger   => $logger,
    datadir  => $setup{datadir},
    confdir  => $setup{confdir},
    deviceid => 'foo',
);

$task->configure(
    pid         => 1,
    threads     => $options->{threads},
    timeout     => $options->{timeout},
    devices     => \@hosts,
    credentials => [ $credentials ]
);

my $target = FusionInventory::Agent::Target->create(
    url    => $options->{server},
    path   => $options->{directory},
    logger => $logger,
);

$task->run(target => $target);

__END__

=head1 NAME

fusioninventory-netinventory - Standalone network inventory

=head1 SYNOPSIS

B<fusioninventory-netinventory>
S<[B<--credentials> I<string>]> S<[B<--timeout> I<integer>]>
S<[B<--threads> I<integer>]> S<[B<--entity> I<string>]>
S<[B<--directory> I<path>]> S<[B<--server> I<url>]>
S<[B<--debug>]>
I<host> S<[I<host> ...]>

=head1 DESCRIPTION

F<fusioninventory-netinventory> allows to run a network inventory task without
a GLPI server.

=head1 OPTIONS

=over

=item B<--credentials> I<string>

SNMP credentials (default: version:2c,community:public)

=item B<--timeout> I<integer>

SNMP timeout (default: 15s)

=item B<--threads> I<integer>

threads number (default: 1)

=item B<--entity> I<string>

GLPI entity

=item B<--directory> I<path>

directory target path

=item B<--server> I<url>

server target url

=item B<--debug>

debug output

=back

=head1 EXAMPLES

    $> fusioninventory-netinventory 192.168.1.24
    $> fusioninventory-netinventory 192.168.1.24
        --directory /tmp
    $> fusioninventory-netinventory 192.168.1.24
        --server http://glpi.domain.com/plugins/fusioninventory/
    $> fusioninventory-netinventory ip:192.168.1.24,id:1,type:network
    $> fusioninventory-netinventory ip:192.168.1.24,id:1,type:network
        --credentials version:3,username:foo,authprotocol:sha1,authpassword:bar
    $> fusioninventory-netinventory 192.168.1.24 192.168.1.25
    $> fusioninventory-netinventory ip:192.168.1.24,id:1 ip:192.168.1.25,id:2
