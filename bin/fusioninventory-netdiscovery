#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent::Task::NetDiscovery;
use FusionInventory::Agent::Logger;
use FusionInventory::Agent::Target;

my $options = {
    debug   => 0,
    threads => 1
};

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

GetOptions(
    $options,
    'directory=s',
    'server=s',
    'first=s',
    'last=s',
    'community=s@',
    'credential=s@',
    'entity=s',
    'threads=i',
    'timeout=i',
    'debug+',
    'help',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "--first option is deprecated, use regular argument instead\n",
    -verbose => 0
) if $options->{first};

pod2usage(
    -message => "--last option is deprecated, use regular argument instead\n",
    -verbose => 0
) if $options->{last};

pod2usage(
    -message => "no network given, aborting\n", -verbose => 0
) unless @ARGV;

my $verbosity =
    $options->{debug} == 0 ? LOG_INFO   :
    $options->{debug} == 1 ? LOG_DEBUG  :
    $options->{debug} == 2 ? LOG_DEBUG2 :
                             LOG_DEBUG2 ;

my $logger = FusionInventory::Agent::Logger->new(verbosity => $verbosity);

my $task = FusionInventory::Agent::Task::NetDiscovery->new(
    logger   => $logger,
    datadir  => $setup{datadir},
    confdir  => $setup{confdir},
    deviceid => 'foo',
);

my $block_id = 1;
my @blocks;
foreach my $arg (@ARGV) {
    my $block;
    foreach my $parameter (split(',', $arg)) {
        my ($key, $value) = split(':', $parameter);
        if (!$value) {
            $block->{spec} = $key;
        } else {
            $block->{$key} = $value;
        }
    }
    $block->{id}     = $block_id++ unless $block->{id};
    $block->{entity} = $options->{entity} if $options->{entity};
    push @blocks, $block;
}

my $credentials_id = 1;
my @credentials;
if ($options->{community}) {
    foreach my $community (@{$options->{community}}) {
        push @credentials,
            { id => $credentials_id++, version => 1, community => $community };
    }
} elsif ($options->{credential}) {
    foreach my $specification (@{$options->{credential}}) {
        my $credential = { id => $credentials_id++ };
        foreach my $parameter (split(',', $specification)) {
            my ($key, $value) = split(':', $parameter);
            $credential->{$key} = $value;
        }
        push @credentials, $credential;
    }
} else {
    push @credentials, {
        id => $credentials_id++, version => 1, community => 'public'
    };
}

$task->configure(
    pid         => 1,
    threads     => $options->{threads},
    timeout     => $options->{timeout},
    blocks      => \@blocks,
    snmp_credentials => \@credentials,
);

my $target = FusionInventory::Agent::Target->create(
    url    => $options->{server},
    path   => $options->{directory},
    logger => $logger,
);

$task->run(target => $target);

__END__

=head1 NAME

fusioninventory-netdiscovery - Standalone network discovery

=head1 SYNOPSIS

fusioninventory-netdiscovery [options] <network>

  Options:
    --directory     directory target
    --server        server target
    --credential    SNMP credential (default: version:1,community:public)
    --entity        GLPI entity
    --threads nb    number of discovery threads (default: 1)
    --timeout val   SNMP timeout (default: 1s)
    --debug         debug output (execution traces)
    -h --help       print this message and exit
    --version       print the task version and exit

=head1 DESCRIPTION

F<fusioninventory-netdiscovery> allows to run a network discovery task without a
GLPI server.
