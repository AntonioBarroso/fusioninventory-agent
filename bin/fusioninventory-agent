#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;
use FusionInventory::Agent::Config;
use FusionInventory::Agent::Logger;

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {};

Getopt::Long::Configure( "no_ignorecase" );
GetOptions(
    $options,
    # executable-specific options
    'lazy',
    'list-modules',
    'setup',
    'wait|w=s',
    'version',
    'help|h',
    'conf-file=s',
    'config=s',
    # agent configuration options
    'ca-cert-dir=s',
    'ca-cert-file=s',
    'color',
    'debug+',
    'logger=s',
    'logfile=s',
    'logfile-maxsize=i',
    'no-ssl-check',
    'no-module=s',
    'password|p=s',
    'proxy|P=s',
    'server|s=s',
    'timeout=i',
    'user|u=s',
    # deprecated options
    'delaytime=s',
    'html',
    'force|f',
    'local|l=s',
    'list-tasks',
    'no-task=s',
    'daemon|d',
    'no-fork',
    'no-httpd',
    'pidfile=s',
    'httpd-ip=s',
    'httpd-port=s',
    'httpd-trust=s',
    'additional-content=s',
    'backend-collect-timeout=s',
    'no-category=s',
    'scan-homedirs',
    'scan-profiles',
    'no-p2p',
    'tag|t=s',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitstatus => 0) if $options->{help};

if ($options->{version}) {
    print $FusionInventory::Agent::VERSION_STRING . "\n";
    exit 0;
}

foreach my $option (qw/daemon no-fork no-httpd pidfile httpd-id httpd-port httpd-trust/) {
    next unless $options->{$option};
    print STDERR
        "option --$option is deprecated, used fusioninventory-daemon instead\n";
    exit 1;
}

foreach my $option (qw/no-category scan-homedirs scan-profiles backend-collect-timeout additional-content tag no-p2p/) {
    next unless $options->{$option};
    print STDERR
        "module-specific option --$option is deprecated, use either configuration file or dedicated executable\n";
}

if ($options->{setup}) {
    foreach my $key (keys %setup) {
        print "$key: $setup{$key}\n";
    }
    exit 0;
}

if ($options->{'conf-file'}) {
    if ($options->{config}) {
        if ($options->{config} ne 'file') {
            print STDERR
                "don't use --conf-file with $options->{config} backend";
            exit 1;
        }
    } else {
        $options->{config} = 'file';
    }
}

my $config = FusionInventory::Agent::Config->new(
    confdir => $setup{confdir},
    options => $options,
);

my $logger = FusionInventory::Agent::Logger->new(
    config => $config
);

my $agent = FusionInventory::Agent->new(
    config => $config,
    logger => $logger,
    %setup
);

if ($options->{'list-tasks'}) {
    print STDERR
        "--list-tasks is deprecated, use --list-modules instead\n";
    $options->{'list-modules'} = 1;
}

if ($options->{'list-modules'}) {
    my %modules = $agent->getAvailableModules();
    foreach my $module (keys %modules) {
        print "$module (v$modules{$module})\n";
    }
    exit 0;
}

if ($options->{wait}) {
    my $time = int rand($options->{wait});
    sleep $time;
}

eval {
    $agent->init(options => $options);
    $agent->initModules();

    my $time = time();
    foreach my $controller (@{$agent->{controllers}}) {
        if ($options->{lazy} && $time < $controller->getNextRunDate()) {
            $agent->{logger}->info(
                "$controller->{id} is not ready yet, next server contact " .
                "planned for " . localtime($controller->getNextRunDate())
            );
            next;
        }

        $agent->executeScheduledTasks($controller);
    }
};

if ($EVAL_ERROR) {
    print STDERR "Execution failure:.\n";
    print STDERR $EVAL_ERROR;
    exit 1;
}

exit(0);

__END__

=head1 NAME

fusioninventory-agent - FusionInventory agent

=head1 SYNOPSIS

B<fusioninventory-agent>
S<[B<--config> I<string>]>
S<[B<--conf-file> I<file>]>
S<[B<--lazy>]>
S<[B<--wait> I<integer>]>
S<[B<--server> I<url>]>
S<[B<--no-module> I<string>]>
S<[B<--proxy> I<url>]>
S<[B<--user> I<string>]>
S<[B<--password> I<string>]>
S<[B<--ca-cert-dir> I<directory>]>
S<[B<--ca-cert-file> I<file>]>
S<[B<--no-ssl-check>]>
S<[B<--timeout> I<time>]>
S<[B<--logger> I<string>]>
S<[B<--logfile> I<file>]>
S<[B<--logfile-maxsize> I<integer>]>
S<[B<--logfacility> I<string>]>
S<[B<--color>]>

B<fusioninventory-agent> B<--list-modules>

B<fusioninventory-agent> B<--setup>

=head1 DESCRIPTION

This executable allows to run the agent in half-managed mode: the agent contact
its server immediatly, executes required tasks, and stops.

=head1 OPTIONS

=head2 Executable-specific options

Those options can be passed on command-line only.

=over

=item B<--config>=I<BACKEND>

Configuration backend to use.

The available backends are:

=over 4

=item

file: read configuration from a file (default anywhere else as Windows).

=item

registry: read configuration from the registry (default on Windows).

=item

none: don't read any configuration.

=back

=item B<--conf-file>=I<FILE>

Use I<FILE> as configuration file (implies file configuration backend).

=item B<--lazy>

Do not contact the target before next scheduled time.

=item B<-w> I<LIMIT>, B<--wait>=I<LIMIT>

Wait a random delay whose value is computed randomly between 0 and LIMIT
seconds, before execution. This is useful when execution is triggered from some
kind of system scheduling on multiple clients, to spread the server load.

=item B<--list-modules>

List available modules and exit

=item B<--setup>

Print the agent setup directories and exit.

=item B<--version>

Print the version and exit.

=back

=head2 Agent configuration options

Those options can be passed on command-line to override values found in
configuration file.

=over

=item B<-s>, B<--server>=I<URI>

Set B<server> option, see L<agent.cfg> for details.

=item B<--no-module>=I<MODULE>

Set B<no-module> option, see L<agent.cfg> for details.

=item B<-P>, B<--proxy>=I<PROXY>

Set B<proxy> option, see L<agent.cfg> for details.

=item B<-u> I<USER>, B<--user>=I<USER>

Set B<user> option, see L<agent.cfg> for details.

=item B<-p>, B<--password>=I<PASSWORD>

Set B<password> option, see L<agent.cfg> for details.

=item B<--ca-cert-dir>=I<DIRECTORY>

Set B<ca-cert-dir> option, see L<agent.cfg> for details.

=item B<--ca-cert-file>=I<FILE>

Set B<ca-cert-file> option, see L<agent.cfg> for details.

=item B<--no-ssl-check>

Set B<no-ssl-check> option, see L<agent.cfg> for details.

=item B<--timeout>=I<TIME>

Set B<timeout> option, see L<agent.cfg> for details.

=item B<--logger>=I<BACKEND>

Set B<logger> option, see L<agent.cfg> for details.

=item B<--logfile>=I<FILE>

Set B<logfile> option, see L<agent.cfg> for details.

=item B<--logfile-maxsize>=I<SIZE>

Set B<logfile-maxsize> option, see L<agent.cfg> for details.

=item B<--logfacility>=I<FACILITY>

Set B<logfacility> option, see L<agent.cfg> for details.

=item B<--color>

Set B<color> option, see L<agent.cfg> for details.

=item B<--debug>

Set B<debug> option, see L<agent.cfg> for details.

=back
