#!/usr/bin/perl

use strict;
use warnings;

use lib './lib';
use setup;

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;

Getopt::Long::Configure( "no_ignorecase" );

my $options = {};

GetOptions(
    $options,
    'ca-cert-path=s',
    'conf-file=s',
    'conf-reload-interval=i',
    'config=s',
    'daemon|d',
    'no-fork',
    'debug+',
    'help|h',
    'list-modules',
    'setup',
    'logger=s',
    'logfile=s',
    'logfile-maxsize=i',
    'no-httpd',
    'no-ssl-check',
    'no-module=s',
    'password|p=s',
    'pidfile=s',
    'proxy|P=s',
    'httpd-ip=s',
    'httpd-port=s',
    'httpd-trust=s',
    'server|s=s',
    'tag|t=s',
    'timeout=i',
    'user|u=s',
    'version',
    'wait|w=s',
    # deprecated options
    'additional-content=s',
    'backend-collect-timeout=s',
    'ca-cert-dir=s',
    'ca-cert-file=s',
    'color',
    'delaytime=s',
    'force|f',
    'html',
    'lazy',
    'list-tasks',
    'local',
    'no-category=s',
    'no-compression|C',
    'no-task',
    'no-p2p',
    'scan-homedirs',
    'scan-profiles',
    'tasks',
    # Platform specific option
    'no-win32-ole-workaround'
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitstatus => 0) if $options->{help};

if ($options->{version}) {
    my $PROVIDER = $FusionInventory::Agent::Version::PROVIDER;
    print $_ . "\n" foreach (
        "$PROVIDER Agent $FusionInventory::Agent::VERSION",
        @{$FusionInventory::Agent::COMMENTS}
    );
    exit 0;
}

if ($options->{setup}) {
    foreach my $key (keys %setup) {
        print "$key: $setup{$key}\n";
    }
    exit 0;
}

if ($options->{'conf-file'}) {
    if ($options->{config}) {
        if ($options->{config} ne 'file') {
            print STDERR
                "don't use --conf-file with $options->{config} backend";
            exit 1;
        }
    } else {
        $options->{config} = 'file';
    }
}

if ($OSNAME eq 'MSWin32' && ! $options->{'no-win32-ole-workaround'}) {
    # From here we may need to avoid crashes due to not thread-safe Win32::OLE
    FusionInventory::Agent::Tools::Win32->require();
    FusionInventory::Agent::Tools::Win32::start_Win32_OLE_Worker();
}

my $agent = FusionInventory::Agent->new(%setup);

if ($options->{'list-modules'}) {
    my %tasks = $agent->getAvailableTasks();
    print "Available modules: \n";
    foreach my $task (keys %tasks) {
        print "$task (v$tasks{$task})\n";
    }

    exit 0;
}

if ($options->{wait}) {
    my $time = int rand($options->{wait});
    sleep $time;
}

eval {
    $agent->init(
        options => {
            _ => {
                no_module => $options->{'no-module'},
                server    => $options->{'server'},
                tag       => $options->{'tag'},
            },
            http => {
                ca_cert_path => $options->{'ca-cert-path'},
                no_ssl_check => $options->{'no-ssl-check'},
                password     => $options->{'password'},
                proxy        => $options->{'proxy'},
                timeout      => $options->{'timeout'},
                user         => $options->{'user'},
            },
            listener => {
                no_httpd    => $options->{'no-httpd'},
                httpd_ip    => $options->{'httpd-ip'},
                httpd_port  => $options->{'httpd-port'},
                httpd_trust => $options->{'httpd-trust'},
            },
            logger => {
                debug        => $options->{'debug'},
                logger       => $options->{'logger'},
                file         => $options->{'logfile'},
                maxsize      => $options->{'logfile-maxsize'},
                facility     => $options->{'logfacility'},
            }
        }
    );
    $agent->run();
};

if ($EVAL_ERROR) {
    print STDERR "Execution failure:.\n";
    print STDERR $EVAL_ERROR;
    exit 1;
}

exit(0);

__END__

=head1 NAME

fusioninventory-agent - FusionInventory agent For Linux/UNIX, Windows and MacOSX

=head1 SYNOPSIS

B<fusioninventory-agent> [options] [--server server]

  Target definition options:
    -s --server=URI                send modules result to a server

  Module selection options:
    --list-modules                     list available modules and exit
    --no-module=MODULE[,MODULE]...     do not run given module

  Network options:
    -P --proxy=PROXY               proxy address
    -u --user=USER                 user name for server authentication
    -p --password=PASSWORD         password for server authentication
    --ca-cert-path=PATH            CA certificates path
    --no-ssl-check                 do not check server SSL certificate
                                     (false)
    --timeout=TIME                 connection timeout, in seconds (180)

  Web interface options:
    --no-httpd                     disable embedded web server (false)
    --httpd-ip=IP                  network interface to listen to (all)
    --httpd-port=PORT              network port to listen to (62354)
    --httpd-trust=IP               trust requests without authentication
                                     token (false)

  Logging options:
    --logger=BACKEND               logger backend (stderr)
    --logfile=FILE                 log file
    --logfile-maxsize=SIZE         maximum size of the log file in MB (0)
    --logfacility=FACILITY         syslog facility (LOG_USER)

  Configuration options:
    --config=BACKEND                   configuration backend
    --conf-file=FILE                   configuration file
    --conf-reload-interval=<SECONDS>   number of seconds between two
                                         configuration reloadings

  Execution mode options:
    -w --wait=LIMIT                maximum delay before execution,
                                     in seconds
    -d --daemon                    run the agent as a daemon (false)
    --no-fork                      don't fork in background (false)
    -t --tag=TAG                   add given tag to inventory results
    --debug                        debug mode (false)
    --setup                        print the agent setup directories
                                     and exit
    --version                      print the version and exit
    --no-win32-ole-workaround      [win32 only] disable win32 work-around
                                     used to better handle Win32::OLE apis.
                                     !!! Use it at your own risk as you may
                                     experiment perl crash under win32 !!!

=head1 DESCRIPTION

The F<fusioninventory-agent> agent is a generic multi-platform agent. It can
perform a large array of management tasks, such as local inventory, software
deployment or network discovery. It can be used either standalone, or in
combination with a compatible server (OCS, GLPI, OTRS) acting as a centralized
control point.

=head1 OPTIONS

Most of the options are available in a I<short> form and a I<long> form.  For
example, the two lines below are all equivalent:

    % fusioninventory-agent -s localhost
    % fusioninventory-agent --server localhost

=head2 Target definition options

=over

=item B<-s>, B<--server>=I<URI>

Send the results of modules execution to given server.

If I<URI> doesn't start with http:// or https://, the agent assume the
parameter is a hostname and rewrite it as:

    % --server=http://servername/ocsinventory

In general, OCS Inventory server URL have this format:

    http://servername/ocsinventory

and FusionInventory for GLPI this one:

    http://servername/glpi/plugins/fusioninventory/front/plugin_fusioninventory.communication.php

=head2 Module selection options

=over

=item B<--list-modules>

List all available modules, modules planned for execution and exit

=item B<--no-module>=I<MODULE>

Do not run given module.

Multiple values can be specified, using comma as a separator. See option
I<--list-modules> for the list of available modules.

=back

=head2 Server target specific options

=over

=item B<-P>, B<--proxy>=I<PROXY>

Use I<PROXY> as HTTP proxy.

By default, the agent uses HTTP_PROXY environment variable.

=item B<-u> I<USER>, B<--user>=I<USER>

Use I<USER> for server authentication.

=item B<-p>, B<--password>=I<PASSWORD>

Use I<PASSWORD> for server authentication.

=item B<--ca-cert-path>=I<PATH>

CA certificates path, either a directory or a file.

=item B<--no-ssl-check>

Do not check server SSL certificate.

=item B<--timeout>=I<TIME>

Timeout for server connections.

=back

=head2 Web interface options

=over

=item B<--no-httpd>

Disable the embedded web server.

=item B<--httpd-ip>=I<IP>

The network interface to use for the embedded web server (all).

=item B<--httpd-port>=I<PORT>

The network port to use for the embedded web server (62354).

=item B<--httpd-trust>=I<IP>

Trust requests from given addresses without authentication token (false).

For example: "192.168.0.0/24", "192.168.168.0.5" or an IP range like
"20.34.101.207 - 201.3.9.99". Hostnames are also accepted. See L<Net::IP>
documentation to get more example.

Multiple values can be specified, using comma as a separator.

=back

=head2 Logging options

=over

=item B<--logger>=I<BACKEND>

Logger backend to use.

Multiple values can be specified, using comma as a separator. The available
backends are:

=over 4

=item

stderr: log messages directly in the console.

=item

file: log messages in a file.

=item

syslog: log messages through the local syslog server.

=back

Multiple values can be specified, using comma as a separator.

=item B<--logfile>=I<FILE>

Log message in I<FILE> (implies File logger backend).

=item B<--logfile-maxsize>=I<SIZE>

Max logfile size in MB, default is unlimited. When the max size is reached, the
file is truncated. This is only useful if there is no log rotation mechanism on
the system.

=item B<--logfacility>=I<FACILITY>

Syslog facility to use (default LOG_USER).

=back

=head2 Configuration options

=over


=item B<--config>=I<BACKEND>

Configuration backend to use.

The available backends are:

=over 4

=item

file: read configuration from a file (default anywhere else as Windows).

=item

registry: read configuration from the registry (default on Windows).

=item

none: don't read any configuration.

=back

=item B<--conf-file>=I<FILE>

Use I<FILE> as configuration file (implies file configuration backend).

=item B<--conf-reload-interval>=I<SECONDS>

SECONDS is the number of seconds between two configuration reloadings.
Default value is 0, which means that configuration is never reloaded.
Minimum value is 60. If given value is less than this minimum, it is set to
this minimum. If given value is less than 0, it is set to 0.

=back

=head2 Execution mode options

=over

=item B<-w> I<LIMIT>, B<--wait>=I<LIMIT>

Wait a random delay whose value is computed randomly between 0 and LIMIT
seconds, before execution. This is useful when execution is triggered from some
kind of system scheduling on multiple clients, to spread the server load.

=item B<-d>, B<--daemon>

Run the agent as a daemon.

=item B<--no-fork>

Don't fork in background.

This is only useful when running as a daemon.

=item B<--pidfile>=I<FILE>

Store pid in I<FILE>.

This is only useful when running as a daemon.

=item B<--tag>=I<TAG>

Add the given tag to every inventory results.

=item B<--debug>

Turn the debug mode on. You can use the parameter up to 3 times in a row
to increase the verbosity (e.g: B<--debug --debug>).

Level 3 turns on the debug mode of some external libraries like Net::SSLeay.
These messages will only be be printed on STDERR.

=item B<--setup>

Print the agent setup directories and exit.

=item B<--version>

Print the version and exit.

=back
