#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;


my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {};

Getopt::Long::Configure( "no_ignorecase" );
GetOptions(
    $options,
    # executable-specific options
    'lazy',
    'list-modules',
    'setup',
    'wait|w=s',
    'version',
    'help|h',
    'conf-file=s',
    'config=s',
    # agent configuration options
    'ca-cert-dir=s',
    'ca-cert-file=s',
    'color',
    'debug+',
    'delaytime=s',
    'logger=s',
    'logfile=s',
    'logfile-maxsize=i',
    'no-ssl-check',
    'no-module=s',
    'password|p=s',
    'proxy|P=s',
    'server|s=s',
    'timeout=i',
    'user|u=s',
    # deprecated options
    'html',
    'force|f',
    'local|l=s',
    'list-tasks',
    'no-task=s',
    'daemon|d',
    'no-fork',
    'no-httpd',
    'pidfile=s',
    'httpd-ip=s',
    'httpd-port=s',
    'httpd-trust=s',
    'additional-content=s',
    'backend-collect-timeout=s',
    'no-category=s',
    'scan-homedirs',
    'scan-profiles',
    'no-p2p',
    'tag|t=s',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitstatus => 0) if $options->{help};

if ($options->{version}) {
    print $FusionInventory::Agent::VERSION_STRING . "\n";
    exit 0;
}

foreach my $option (qw/daemon no-fork no-httpd pidfile httpd-id httpd-port httpd-trust/) {
    next unless $options->{$option};
    print STDERR
        "option --$option is deprecated, used fusioninventory-daemon instead\n";
    exit 1;
}

foreach my $option (qw/no-category scan-homedirs scan-profiles backend-collect-timeout additional-content tag no-p2p/) {
    next unless $options->{$option};
    print STDERR
        "module-specific option --$option is deprecated, use either configuration file or dedicated executable\n";
}

if ($options->{setup}) {
    foreach my $key (keys %setup) {
        print "$key: $setup{$key}\n";
    }
    exit 0;
}

if ($options->{'conf-file'}) {
    if ($options->{config}) {
        if ($options->{config} ne 'file') {
            print STDERR
                "don't use --conf-file with $options->{config} backend";
            exit 1;
        }
    } else {
        $options->{config} = 'file';
    }
}

my $agent = FusionInventory::Agent->new(%setup);

if ($options->{'list-tasks'}) {
    print STDERR
        "--list-tasks is deprecated, use --list-modules instead\n";
    $options->{'list-modules'} = 1;
}

if ($options->{'list-modules'}) {
    my %modules = $agent->getAvailableModules();
    foreach my $module (keys %modules) {
        print "$module (v$modules{$module})\n";
    }
    exit 0;
}

if ($options->{wait}) {
    my $time = int rand($options->{wait});
    sleep $time;
}

eval {
    $agent->init(options => $options);

    my $time = time();
    foreach my $controller (@{$agent->{controllers}}) {
        if ($options->{lazy} && $time < $controller->getNextRunDate()) {
            $agent->{logger}->info(
                "$controller->{id} is not ready yet, next server contact " .
                "planned for " . localtime($controller->getNextRunDate())
            );
            next;
        }

        $agent->executeScheduledTasks($controller);
    }
};

if ($EVAL_ERROR) {
    print STDERR "Execution failure:.\n";
    print STDERR $EVAL_ERROR;
    exit 1;
}

exit(0);

__END__

=head1 NAME

fusioninventory-agent - FusionInventory agent For Linux/UNIX, Windows and MacOSX

=head1 SYNOPSIS

B<fusioninventory-agent> [options] --server server

  Executable-specific options:
    --config=BACKEND         configuration backend
    --conf-file=FILE         configuration file
    --lazy                   do not contact the server before next
                                 scheduled time
    --wait=LIMIT             maximum delay before execution, in seconds
    --list-modules           list available modules and exit
    --setup                  print the agent setup directories and exit
    --version                print the version and exit

  Agent configuration options:
    --server=URI             send tasks result to a server
    --delaytime=LIMIT        maximum delay before first server contact in 
                                 seconds (3600)
    --no-module=MODULE       do not use given module
    --proxy=PROXY            proxy address
    --user=USER              user name for server authentication
    --password=PASSWORD      password for server authentication
    --ca-cert-dir=DIRECTORY  CA certificates directory
    --ca-cert-file=FILE      CA certificates file
    --no-ssl-check           do not check server SSL certificate (false)
    --timeout=TIME           connection timeout, in seconds (180)
    --logger=BACKEND         logger backend (stderr)
    --logfile=FILE           log file
    --logfile-maxsize=SIZE   maximum size of the log file in MB (0)
    --logfacility=FACILITY   syslog facility (LOG_USER)
    --color                  use color in the console (false)
    --debug                  debug mode (false)

=head1 DESCRIPTION

The F<fusioninventory-agent> agent is a generic multi-platform agent. It can
perform a large array of management tasks, such as local inventory, software
deployment or network discovery. It can be used either standalone, or in
combination with a compatible server (OCS, GLPI, OTRS) acting as a centralized
control point.

=head1 OPTIONS

=head2 Executable-specific options

Those options can be passed on command-line only.

=over

=item B<--config>=I<BACKEND>

Configuration backend to use.

The available backends are:

=over 4

=item

file: read configuration from a file (default anywhere else as Windows).

=item

registry: read configuration from the registry (default on Windows).

=item

none: don't read any configuration.

=back

=item B<--conf-file>=I<FILE>

Use I<FILE> as configuration file (implies file configuration backend).

=item B<--lazy>

Do not contact the target before next scheduled time.

=item B<-w> I<LIMIT>, B<--wait>=I<LIMIT>

Wait a random delay whose value is computed randomly between 0 and LIMIT
seconds, before execution. This is useful when execution is triggered from some
kind of system scheduling on multiple clients, to spread the server load.

=item B<--list-modules>

List available modules and exit

=item B<--setup>

Print the agent setup directories and exit.

=item B<--version>

Print the version and exit.

=back

=head2 Agent configuration options

Those options can be passed on command-line to override values found in configuration.

=over

=item B<-s>, B<--server>=I<URI>

Send the results of tasks execution to given server.

If I<URI> doesn't start with http:// or https://, the agent assume the
parameter is a hostname and rewrite it as:

    % --server=http://servername/ocsinventory

In general, OCS Inventory server URL have this format:

    http://servername/ocsinventory

and FusionInventory for GLPI this one:

    http://servername/glpi/plugins/fusioninventory/front/plugin_fusioninventory.communication.php

Multiple values can be specified, using comma as a separator.

=item B<--delaytime>=I<LIMIT>

Set an initial delay before the first target, whose value is computed randomly
between LIMIT / 2 and LIMIT seconds. This setting is ignored for server targets
after the initial contact, in favor of server-specified parameter
(PROLOG_FREQ).

=item B<--no-module>=I<MODULE>

Do not run given module.

Multiple values can be specified, using comma as a separator. See option
I<--list-modules> for the list of available modules.

=item B<-P>, B<--proxy>=I<PROXY>

Use I<PROXY> as HTTP proxy.

By default, the agent uses HTTP_PROXY environment variable.

=item B<-u> I<USER>, B<--user>=I<USER>

Use I<USER> for server authentication.

=item B<-p>, B<--password>=I<PASSWORD>

Use I<PASSWORD> for server authentication.

=item B<--ca-cert-dir>=I<DIRECTORY>

CA certificates directory.

=item B<--ca-cert-file>=I<FILE>

CA certificates file.

=item B<--no-ssl-check>

Do not check server SSL certificate.

=item B<--timeout>=I<TIME>

Timeout for server connections.

=item B<--logger>=I<BACKEND>

Logger backend to use.

Multiple values can be specified, using comma as a separator. The available
backends are:

=over 4

=item

stderr: log messages directly in the console.

=item

file: log messages in a file.

=item

syslog: log messages through the local syslog server.

=back

Multiple values can be specified, using comma as a separator.

=item B<--logfile>=I<FILE>

Log message in I<FILE> (implies File logger backend).

=item B<--logfile-maxsize>=I<SIZE>

Max logfile size in MB, default is unlimited. When the max size is reached, the
file is truncated. This is only useful if there is no log rotation mechanism on
the system.

=item B<--logfacility>=I<FACILITY>

Syslog facility to use (default LOG_USER).

=item B<--color>

Display color on the terminal, when the Stderr backend is used.

This options is ignored on Windows.

=item B<--debug>

Turn the debug mode on. You can use the parameter up to 3 times in a row
to increase the verbosity (e.g: B<--debug --debug>).

Level 3 turns on the debug mode of some external libraries like Net::SSLeay.
These messages will only be be printed on STDERR.


=back
