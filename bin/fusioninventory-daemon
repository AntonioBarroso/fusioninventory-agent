#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use Cwd;
use English qw(-no_match_vars);
use File::Spec;
use Getopt::Long;
use Pod::Usage;
use Proc::Daemon;
use Proc::PID::File;

use FusionInventory::Agent;
use FusionInventory::Agent::Config;
use FusionInventory::Agent::Logger;

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {};

Getopt::Long::Configure( "no_ignorecase" );
GetOptions(
    $options,
    # executable options
    'conf-file=s',
    'config=s',
    'pidfile=s',
    'no-fork',
    'help|h',
    # agent configuration options
    'ca-cert-dir=s',
    'ca-cert-file=s',
    'debug+',
    'logger=s',
    'logfile=s',
    'logfile-maxsize=i',
    'no-httpd',
    'no-ssl-check',
    'no-module=s',
    'password|p=s',
    'proxy|P=s',
    'httpd-ip=s',
    'httpd-port=s',
    'httpd-trust=s',
    'server|s=s',
    'timeout=i',
    'user|u=s',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitstatus => 0) if $options->{help};

my $config = FusionInventory::Agent::Config->create(
    backend   => $options->{config},
    directory => $setup{confdir},
    file      => $options->{'conf-file'},
    options   => {
        ca_cert_dir     => $options->{'ca_cert_dir'},
        ca_cert_file    => $options->{'ca_cert_file'},
        debug           => $options->{'debug'},
        logger          => $options->{'logger'},
        logfile         => $options->{'logfile'},
        logfile_maxsize => $options->{'logfile-maxsize'}
        no_ssl_check    => $options->{'no-ssl-check'},
        no_module       => $options->{'no-module'},
        no_httpd        => $options->{'no-httpd'},
        password        => $options->{'password'},
        proxy           => $options->{'proxy'},
        server          => $options->{'server'},
        timeout         => $options->{'timeout'},
        user            => $options->{'user'},
        httpd_ip        => $options->{'httpd-ip'},
        httpd_port      => $options->{'httpd-port'},
        httpd_trust     => $options->{'httpd-trust'},
    }
);

my $logger = FusionInventory::Agent::Logger->new(
    config => $config
);

my $agent = FusionInventory::Agent->new(
    config => $config,
    logger => $logger,
    setup  => \%setup
);

# initialize the agent
eval {
    $agent->init();
    $agent->initModules(fork => 1);
    $agent->initControllers();
    $agent->initHTTPInterface() unless $config->{'no-httpd'};
    $agent->initHandlers();
    die "no module available\n" unless $agent->getModules();
    die "no server defined\n" unless $agent->getControllers();

    my $pidfile  = $options->{pidfile} ||
                   $setup{vardir} . '/fusioninventory.pid';

    my $pid = Proc::PID::File->new();
    $pid->{path} = $pidfile;

    die "an agent is already running\n" if $pid->alive();

    if (!$options->{'no-fork'}) {

        # enforce absolute pathes, as daemonization changes working directory
        $pidfile = File::Spec->rel2abs($pidfile);
        foreach my $key (%{$agent->{setup}}) {
            $agent->{setup}->{$key} =
                File::Spec->rel2abs($agent->{setup}->{$key});
        }

        my $daemon = Proc::Daemon->new(
            pid_file => $pidfile
        );

        my $pid = $daemon->init();
        if ($pid) {
            $agent->{logger}->debug("agent daemonized");
            exit 0;
        }
    }

    $agent->{logger}->info("FusionInventory Agent starting");
};

if ($EVAL_ERROR) {
    $agent->{logger}->error("Initialization failure, aborting: $EVAL_ERROR");
    exit 1;
}

# run the agent endless loop
eval {
    $agent->run();
};

if ($EVAL_ERROR) {
    $agent->{logger}->error("Execution failure, exiting: $EVAL_ERROR");
    exit 1;
}

exit(0);

__END__

=head1 NAME

fusioninventory-daemon - FusionInventory agent daemon for Unix

=head1 SYNOPSIS

B<fusioninventory-daemon>
S<[B<--config> I<string>]>
S<[B<--conf-file> I<path>]>
S<[B<--no-fork>]>
S<[B<--pidfile> I<path>]>
S<[B<--server> I<url>]>
S<[B<--no-module> I<string>]>
S<[B<--proxy> I<url>]>
S<[B<--user> I<string>]>
S<[B<--password> I<string>]>
S<[B<--ca-cert-dir> I<path>]>
S<[B<--ca-cert-file> I<path>]>
S<[B<--no-ssl-check>]>
S<[B<--timeout> I<integer>]>
S<[B<--logger> I<string>]>
S<[B<--logfile> I<path>]>
S<[B<--logfile-maxsize> I<integer>]>
S<[B<--logfacility> I<string>]>
S<[B<--no-httpd>]>
S<[B<--httpd-ip> I<address>]>
S<[B<--httpd-port> I<integer>]>
S<[B<--httpd-trust> I<address>]>

=head1 DESCRIPTION

This executable allows to run the agent in managed mode on a Unix system: the
agent runs continuously in the background, wakes up periodically to contact
its server and execute required tasks. It may also be contacted out of schedule
by the server, through its web interface.

=head1 OPTIONS

=head2 Executable-specific options

Those options can be passed on command-line only.

=over

=item B<--config> I<string>

Configuration backend to use (default: file).

The available backends are:

=over 4

=item

file: read configuration from a file

=item

registry: read configuration from the registry

=item

none: don't read any configuration

=back

=item B<--conf-file> I<path>

configuration file path (with file backend)

=item B<--no-fork>

Don't fork in background.

=item B<--pidfile> I<path>

Store pid in I<path>.

=back

=head2 Agent configuration options

Those options can be passed on command-line to override values found in
configuration file.

=over

=item B<-s>, B<--server> I<url>

Set B<server> option, see L<agent.cfg> for details.

=item B<--no-module> I<string>

Set B<no-module> option, see L<agent.cfg> for details.

=item B<-P>, B<--proxy> I<url>

Set B<proxy> option, see L<agent.cfg> for details.

=item B<-u>, B<--user> I<string>

Set B<user> option, see L<agent.cfg> for details.

=item B<-p>, B<--password> I<string>

Set B<password> option, see L<agent.cfg> for details.

=item B<--ca-cert-dir> I<path>

Set B<ca-cert-dir> option, see L<agent.cfg> for details.

=item B<--ca-cert-file> I<path>

Set B<ca-cert-file> option, see L<agent.cfg> for details.

=item B<--no-ssl-check>

Set B<no-ssl-check> option, see L<agent.cfg> for details.

=item B<--timeout> I<integer>

Set B<timeout> option, see L<agent.cfg> for details.

=item B<--logger> I<string>

Set B<logger> option, see L<agent.cfg> for details.

=item B<--logfile> I<path>

Set B<logfile> option, see L<agent.cfg> for details.

=item B<--logfile-maxsize> I<integer>

Set B<logfile-maxsize> option, see L<agent.cfg> for details.

=item B<--logfacility> I<string>

Set B<logfacility> option, see L<agent.cfg> for details.

=item B<--debug>

Set B<debug> option, see L<agent.cfg> for details.

=item B<--no-httpd>

Set B<no-httpd> option, see L<agent.cfg> for details.

=item B<--httpd-ip> I<integer>

Set B<httpd-ip> option, see L<agent.cfg> for details.

=item B<--httpd-port> I<integer>

Set B<httpd-port> option, see L<agent.cfg> for details.

=item B<--httpd-trust> I<address>

Set B<httpd-trust> option, see L<agent.cfg> for details.

=back
