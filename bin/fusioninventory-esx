#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars) ;
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;
use FusionInventory::Agent::Config;
use FusionInventory::Agent::Logger;
use FusionInventory::Agent::Target;
use FusionInventory::Agent::Task::ESX;

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {
    debug => 0,
};

GetOptions(
    $options,
    'config=s',
    'conf-file=s',
    'directory=s',
    'server=s',
    'user=s',
    'password=s',
    'tag=s',
    'debug+',
    'help',
    # deprecated
    'host=s',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitstatus => 0) if $options->{help};

pod2usage(
    -message => "--host option is deprecated, use regular argument instead\n",
    -verbose => 0
) if $options->{host};

pod2usage(
    -message => "no host given, aborting\n", -verbose => 0
) unless @ARGV;

my $config = FusionInventory::Agent::Config->new(
    confdir => $setup{confdir},
    options => $options,
);

my $logger = FusionInventory::Agent::Logger->new(
    config => $config
);

my $agent = FusionInventory::Agent->new(
    config => $config,
    logger => $logger,
    setup  => \%setup
);
$agent->init();
$agent->initHandlers();

my $task = FusionInventory::Agent::Task::ESX->new(
    logger => $logger,
    datadir => $setup{datadir},
    confdir => $setup{confdir},
);

my @jobs;
foreach my $arg (@ARGV) {
    my $job;
    foreach my $parameter (split(',', $arg)) {
        my ($key, $value) = split(':', $parameter);
        if (!$value) {
            $job->{host} = $key;
        } else {
            $job->{$key} = $value;
        }
    }
    $job->{user}     = $options->{user}     if $options->{user};
    $job->{password} = $options->{password} if $options->{password};
    push @jobs, $job;
}

$task->configure(
    jobs => \@jobs
);

my $target = FusionInventory::Agent::Target->create(
    url    => $options->{server},
    path   => $options->{directory},
    logger => $logger,
    config => $config,
);

$task->run(target => $target);

__END__

=head1 NAME

fusioninventory-esx - Standalone ESX inventory

=head1 SYNOPSIS

B<fusioninventory-esx>
S<[B<--config> I<string>]>
S<[B<--conf-file> I<path>]>
S<[B<--directory> I<path>]>
S<[B<--server> I<url>]>
S<[B<--tag> I<string>]>
S<[B<--user> I<string>]> S<[B<--password> I<string>]>
S<[B<--debug>]>
I<host> S<[I<host> ...]>

=head1 DESCRIPTION

F<fusioninventory-esx> allows to run an ESX inventory task without
a GLPI server.

=head1 OPTIONS

=over

=item B<--config> I<string>

Configuration backend to use.

The available backends are:

=over 4

=item

file: read configuration from a file (default anywhere else as Windows).

=item

registry: read configuration from the registry (default on Windows).

=item

none: don't read any configuration.

=back

=item B<--conf-file> I<path>

Use I<path> as configuration file (implies file configuration backend).

=item B<--directory> I<path>

directory target path

=item B<--server> I<url>

server target url

=item B<--tag> I<string>

inventory tag

=item B<--user> I<string>

ESX user name

=item B<--password> I<string>

ESX user password

=item B<--debug>

debug output

=back

=head1 EXAMPLES

Execute an inventory of a single ESX host, sending the results to stdout:

    $> fusioninventory-esx --user foo --password bar esx1

Execute an inventory of a single ESX host, sending the results to a directory:

    $> fusioninventory-esx --user foo --password bar --directory /tmp esx1

Execute an inventory of a single ESX host, sending the results to a server

    $> fusioninventory-esx --user foo --password bar \
        --server http://glpi.domain.com/plugins/fusioninventory esx1

Execute an inventory of two ESX hosts, using same credentials, sending the
results to stdout:

    $> fusioninventory-esx --user foo --password bar esx1 esx2

Execute an inventory of two ESX hosts, using different credentials, sending the
results to stdout:

    $> fusioninventory-esx host:esx1,user:foo,password:bar
